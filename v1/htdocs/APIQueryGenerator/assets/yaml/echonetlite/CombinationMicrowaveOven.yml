name: CombinationMicrowaveOven
prefix: com.sonycsl.kadecot.echonetlite
rpc:
  OperationStatusGet:
    procedure: get
    epc: 128
    size: '1'
    announce: undefined
    doc: "This property indicates the ON/OFF status.\n\nON＝0x30，OFF＝0x31\n\nData Type : unsigned char\nData Size(Byte) : 1\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : mandatory\n\nAnnouncement at status change"
    params:
      propertyName:
        type: string
        const: true
        value: OperationStatus
  OperationStatusSet:
    procedure: set
    epc: 128
    size: '1'
    announce: undefined
    doc: "This property indicates the ON/OFF status.\n\nON＝0x30，OFF＝0x31\n\nData Type : unsigned char\nData Size(Byte) : 1\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : mandatory\n\nAnnouncement at status change"
    params:
      propertyName:
        type: string
        const: true
        value: OperationStatus
      propertyValue:
        type: array
        const: false
        value:
          - 0
  InstallationLocationGet:
    procedure: get
    epc: 129
    size: '1'
    announce: undefined
    doc: "This property indicates the installation location\n\nSee “2.2 ‘Installation location’ property.”\n\nData Type : unsigned char\nData Size(Byte) : 1\n\nAccessRule\nAnnounce : undefined\nSet : mandatory\nGet : mandatory\n\nAnnouncement at status change"
    params:
      propertyName:
        type: string
        const: true
        value: InstallationLocation
  InstallationLocationSet:
    procedure: set
    epc: 129
    size: '1'
    announce: undefined
    doc: "This property indicates the installation location\n\nSee “2.2 ‘Installation location’ property.”\n\nData Type : unsigned char\nData Size(Byte) : 1\n\nAccessRule\nAnnounce : undefined\nSet : mandatory\nGet : mandatory\n\nAnnouncement at status change"
    params:
      propertyName:
        type: string
        const: true
        value: InstallationLocation
      propertyValue:
        type: array
        const: false
        value:
          - 0
  StandardVersionInformationGet:
    procedure: get
    epc: 130
    size: '4'
    announce: undefined
    doc: "This property indicates the version number of the corresponding standard.\n\nFirst byte: Fixed at 0x00 (for future reserved). \nSecond byte: Fixed at 0x00 (for future reserved). \nThird byte: Indicates the order of release in the ASCII format. \nFourth byte: Fixed at 0x00 (for future reserved).\n\nData Type : unsigned char×4\nData Size(Byte) : 4\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : mandatory"
    params:
      propertyName:
        type: string
        const: true
        value: StandardVersionInformation
  StandardVersionInformationSet:
    procedure: set
    epc: 130
    size: '4'
    announce: undefined
    doc: "This property indicates the version number of the corresponding standard.\n\nFirst byte: Fixed at 0x00 (for future reserved). \nSecond byte: Fixed at 0x00 (for future reserved). \nThird byte: Indicates the order of release in the ASCII format. \nFourth byte: Fixed at 0x00 (for future reserved).\n\nData Type : unsigned char×4\nData Size(Byte) : 4\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : mandatory"
    params:
      propertyName:
        type: string
        const: true
        value: StandardVersionInformation
      propertyValue:
        type: array
        const: false
        value:
          - 0
          - 0
          - 0
          - 0
  IdentificationNumberGet:
    procedure: get
    epc: 131
    size: 9or17
    announce: undefined
    doc: "A number that allows each object to be uniquely identified.\n\nFirst byte: lower-layer communication ID field\n0x01－0xFD：This is a communication protocol used in the lower-layer communication and is set arbitrarily according to the protocol class in the case where unique number is assigned (not used in ECHONET Lite).\n0x11－0x1F: Power line Communication Protocol A and B systems\n0x31-0x3F: Designated low-powor radio\n0x41-0x4F: Extended HBS\n0x51-0x5F: IrDA\n0x61-0x6F: LonTalk®\n0x71-0x7F: BlueTooth\n0x81-0x8F: Ethernet\n0x91-0x9F: IEEE802.11/11B\n0xA1: Power line Communication Protocol C systems\n0xB2：IPv6/6LoWPAN\n0xFE：2－17 bytes are defined by the manufacturer, and are set according to the type.\n0xFF：2－9 bytes are defined when randomly generated protocol is used in the lower-layer communication.\n0x00：Identification number is not set.\nSecond and succeeding bytes: unique number field\n\nData Type : unsigned char\nData Size(Byte) : 9 or 17\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: IdentificationNumber
  IdentificationNumberSet:
    procedure: set
    epc: 131
    size: 9or17
    announce: undefined
    doc: "A number that allows each object to be uniquely identified.\n\nFirst byte: lower-layer communication ID field\n0x01－0xFD：This is a communication protocol used in the lower-layer communication and is set arbitrarily according to the protocol class in the case where unique number is assigned (not used in ECHONET Lite).\n0x11－0x1F: Power line Communication Protocol A and B systems\n0x31-0x3F: Designated low-powor radio\n0x41-0x4F: Extended HBS\n0x51-0x5F: IrDA\n0x61-0x6F: LonTalk®\n0x71-0x7F: BlueTooth\n0x81-0x8F: Ethernet\n0x91-0x9F: IEEE802.11/11B\n0xA1: Power line Communication Protocol C systems\n0xB2：IPv6/6LoWPAN\n0xFE：2－17 bytes are defined by the manufacturer, and are set according to the type.\n0xFF：2－9 bytes are defined when randomly generated protocol is used in the lower-layer communication.\n0x00：Identification number is not set.\nSecond and succeeding bytes: unique number field\n\nData Type : unsigned char\nData Size(Byte) : 9 or 17\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: IdentificationNumber
      propertyValue:
        type: array
        const: false
        value:
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
  MeasuredInstantaneousPowerConsumptionGet:
    procedure: get
    epc: 132
    size: '2'
    announce: undefined
    doc: "This property indicates the instantaneous power consumption of the device in watts.\n\n0x0000-0xFFFF（0-65535W）\n\nData Type : unsigned short\nData Size(Byte) : 2\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: MeasuredInstantaneousPowerConsumption
  MeasuredInstantaneousPowerConsumptionSet:
    procedure: set
    epc: 132
    size: '2'
    announce: undefined
    doc: "This property indicates the instantaneous power consumption of the device in watts.\n\n0x0000-0xFFFF（0-65535W）\n\nData Type : unsigned short\nData Size(Byte) : 2\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: MeasuredInstantaneousPowerConsumption
      propertyValue:
        type: array
        const: false
        value:
          - 0
          - 0
  MeasuredCumulativePowerConsumptionGet:
    procedure: get
    epc: 133
    size: '4'
    announce: undefined
    doc: "This property indicates the cumulative power consumption of the device in increments of 0.001kWh.\n\n0x0-0x3B9AC9FF（0-999,999.999kWh）\n\nData Type : unsigned long\nData Size(Byte) : 4\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: MeasuredCumulativePowerConsumption
  MeasuredCumulativePowerConsumptionSet:
    procedure: set
    epc: 133
    size: '4'
    announce: undefined
    doc: "This property indicates the cumulative power consumption of the device in increments of 0.001kWh.\n\n0x0-0x3B9AC9FF（0-999,999.999kWh）\n\nData Type : unsigned long\nData Size(Byte) : 4\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: MeasuredCumulativePowerConsumption
      propertyValue:
        type: array
        const: false
        value:
          - 0
          - 0
          - 0
          - 0
  ManufacturersFaultCodeGet:
    procedure: get
    epc: 134
    size: Max225
    announce: undefined
    doc: "This property indicates the manufacturer-defined fault code.\n\nFirst byte: Indicates the data size of the fault code field.\nSecond to fourth bytes: Manufacturer code\nFifth and succeeding bytes: Field for manufacturer-defined fault code\n\nData Type : unsigned char×(MAX)225\nData Size(Byte) : Max 225\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: ManufacturersFaultCode
  ManufacturersFaultCodeSet:
    procedure: set
    epc: 134
    size: Max225
    announce: undefined
    doc: "This property indicates the manufacturer-defined fault code.\n\nFirst byte: Indicates the data size of the fault code field.\nSecond to fourth bytes: Manufacturer code\nFifth and succeeding bytes: Field for manufacturer-defined fault code\n\nData Type : unsigned char×(MAX)225\nData Size(Byte) : Max 225\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: ManufacturersFaultCode
      propertyValue:
        type: array
        const: false
        value:
          - 0
  CurrentLimitSettingGet:
    procedure: get
    epc: 135
    size: '1'
    announce: undefined
    doc: "This property indicates the current limit setting (0-100%).\n0x00-0x64 （=0-100%）\n\nData Type : unsigned char\nData Size(Byte) : 1\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: CurrentLimitSetting
  CurrentLimitSettingSet:
    procedure: set
    epc: 135
    size: '1'
    announce: undefined
    doc: "This property indicates the current limit setting (0-100%).\n0x00-0x64 （=0-100%）\n\nData Type : unsigned char\nData Size(Byte) : 1\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: CurrentLimitSetting
      propertyValue:
        type: array
        const: false
        value:
          - 0
  FaultStatusGet:
    procedure: get
    epc: 136
    size: '1'
    announce: undefined
    doc: "This property indicates whether a fault (e.g. a sensor trouble) has occurred or not.\n\nFault occurred＝0x41, No fault has occurred＝0x42\n\nData Type : unsigned char\nData Size(Byte) : 1\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : mandatory\n\nAnnouncement at status change"
    params:
      propertyName:
        type: string
        const: true
        value: FaultStatus
  FaultStatusSet:
    procedure: set
    epc: 136
    size: '1'
    announce: undefined
    doc: "This property indicates whether a fault (e.g. a sensor trouble) has occurred or not.\n\nFault occurred＝0x41, No fault has occurred＝0x42\n\nData Type : unsigned char\nData Size(Byte) : 1\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : mandatory\n\nAnnouncement at status change"
    params:
      propertyName:
        type: string
        const: true
        value: FaultStatus
      propertyValue:
        type: array
        const: false
        value:
          - 0
  FaultDescriptionGet:
    procedure: get
    epc: 137
    size: '2'
    announce: undefined
    doc: "Describes the fault.\n\nSee “2.5 ‘Fault Description’ Property.”\n\nData Type : unsigned short\nData Size(Byte) : 2\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: FaultDescription
  FaultDescriptionSet:
    procedure: set
    epc: 137
    size: '2'
    announce: undefined
    doc: "Describes the fault.\n\nSee “2.5 ‘Fault Description’ Property.”\n\nData Type : unsigned short\nData Size(Byte) : 2\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: FaultDescription
      propertyValue:
        type: array
        const: false
        value:
          - 0
          - 0
  ManufacturerCodeGet:
    procedure: get
    epc: 138
    size: '3'
    announce: undefined
    doc: "3-byte manufacturer code\n\n(Defined by the ECHONET Consortium.)\n\nData Type : unsigned char×3\nData Size(Byte) : 3\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : mandatory"
    params:
      propertyName:
        type: string
        const: true
        value: ManufacturerCode
  ManufacturerCodeSet:
    procedure: set
    epc: 138
    size: '3'
    announce: undefined
    doc: "3-byte manufacturer code\n\n(Defined by the ECHONET Consortium.)\n\nData Type : unsigned char×3\nData Size(Byte) : 3\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : mandatory"
    params:
      propertyName:
        type: string
        const: true
        value: ManufacturerCode
      propertyValue:
        type: array
        const: false
        value:
          - 0
          - 0
          - 0
  ￼￼￼￼￼￼￼￼￼￼￼￼BusinessFacilityCodeGet:
    procedure: get
    epc: 139
    size: '3'
    announce: undefined
    doc: "3-byte business facility code\n\n（Defined by each manufacturer.）\n\nData Type : unsigned char×3\nData Size(Byte) : 3\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: ￼￼￼￼￼￼￼￼￼￼￼￼BusinessFacilityCode
  ￼￼￼￼￼￼￼￼￼￼￼￼BusinessFacilityCodeSet:
    procedure: set
    epc: 139
    size: '3'
    announce: undefined
    doc: "3-byte business facility code\n\n（Defined by each manufacturer.）\n\nData Type : unsigned char×3\nData Size(Byte) : 3\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: ￼￼￼￼￼￼￼￼￼￼￼￼BusinessFacilityCode
      propertyValue:
        type: array
        const: false
        value:
          - 0
          - 0
          - 0
  ProductCodeGet:
    procedure: get
    epc: 140
    size: '12'
    announce: undefined
    doc: "Identifies the product usingASCI I code.\n（Defined by each manufacturer.）\n\nData Type : unsigned char×12\nData Size(Byte) : 12\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: ProductCode
  ProductCodeSet:
    procedure: set
    epc: 140
    size: '12'
    announce: undefined
    doc: "Identifies the product usingASCI I code.\n（Defined by each manufacturer.）\n\nData Type : unsigned char×12\nData Size(Byte) : 12\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: ProductCode
      propertyValue:
        type: array
        const: false
        value:
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
  ProductionNumberGet:
    procedure: get
    epc: 141
    size: '12'
    announce: undefined
    doc: "This property indicates the production number using ASCI I code.\n\n（Defined by each manufacturer.）\n\nData Type : unsigned char×12\nData Size(Byte) : 12\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: ProductionNumber
  ProductionNumberSet:
    procedure: set
    epc: 141
    size: '12'
    announce: undefined
    doc: "This property indicates the production number using ASCI I code.\n\n（Defined by each manufacturer.）\n\nData Type : unsigned char×12\nData Size(Byte) : 12\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: ProductionNumber
      propertyValue:
        type: array
        const: false
        value:
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
  ProductionDateGet:
    procedure: get
    epc: 142
    size: '4'
    announce: undefined
    doc: "4-byte production date code\n\nThis property indicates the product ion date in the YYMD format (1 character = 1 byte) .\nYY： Year (e.g. 1999＝ 0x07CF)\nM： Month (e.g. December＝0x0C)\nD： Day (e.g. 20th＝ 0x14)\n\nData Type : unsigned char×4\nData Size(Byte) : 4\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: ProductionDate
  ProductionDateSet:
    procedure: set
    epc: 142
    size: '4'
    announce: undefined
    doc: "4-byte production date code\n\nThis property indicates the product ion date in the YYMD format (1 character = 1 byte) .\nYY： Year (e.g. 1999＝ 0x07CF)\nM： Month (e.g. December＝0x0C)\nD： Day (e.g. 20th＝ 0x14)\n\nData Type : unsigned char×4\nData Size(Byte) : 4\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: ProductionDate
      propertyValue:
        type: array
        const: false
        value:
          - 0
          - 0
          - 0
          - 0
  PowerSavingOperationSettingGet:
    procedure: get
    epc: 143
    size: '1'
    announce: undefined
    doc: "This property indicates whether the device is operating in power-saving mode.\n\nOperating in power-saving mode =0x41\nOperating in normal operation mode =0x42\n\nData Type : unsigned char\nData Size(Byte) : 1\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: PowerSavingOperationSetting
  PowerSavingOperationSettingSet:
    procedure: set
    epc: 143
    size: '1'
    announce: undefined
    doc: "This property indicates whether the device is operating in power-saving mode.\n\nOperating in power-saving mode =0x41\nOperating in normal operation mode =0x42\n\nData Type : unsigned char\nData Size(Byte) : 1\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: PowerSavingOperationSetting
      propertyValue:
        type: array
        const: false
        value:
          - 0
  PositionInformationGet:
    procedure: get
    epc: 147
    size: '16'
    announce: undefined
    doc: "This property indicates the latitude, longitude and altitude of the installation location.\n\nData Type : unsigned char×16\nData Size(Byte) : 16\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional\n\nAnnouncement at status change"
    params:
      propertyName:
        type: string
        const: true
        value: PositionInformation
  PositionInformationSet:
    procedure: set
    epc: 147
    size: '16'
    announce: undefined
    doc: "This property indicates the latitude, longitude and altitude of the installation location.\n\nData Type : unsigned char×16\nData Size(Byte) : 16\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional\n\nAnnouncement at status change"
    params:
      propertyName:
        type: string
        const: true
        value: PositionInformation
      propertyValue:
        type: array
        const: false
        value:
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
  CurrentTimeSettingGet:
    procedure: get
    epc: 151
    size: '2'
    announce: undefined
    doc: "Current time (HH：MM format)\n\n0x00-0x17：0x00-0x3B（ ＝ 0-23）：（ ＝ 0-59）\n\nData Type : unsigned char×2\nData Size(Byte) : 2\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: CurrentTimeSetting
  CurrentTimeSettingSet:
    procedure: set
    epc: 151
    size: '2'
    announce: undefined
    doc: "Current time (HH：MM format)\n\n0x00-0x17：0x00-0x3B（ ＝ 0-23）：（ ＝ 0-59）\n\nData Type : unsigned char×2\nData Size(Byte) : 2\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: CurrentTimeSetting
      propertyValue:
        type: array
        const: false
        value:
          - 0
          - 0
  CurrentDateSettingGet:
    procedure: get
    epc: 152
    size: '4'
    announce: undefined
    doc: "Current date (YYYY：MM：DD format)\n\n1 ～ 0x270F ： 1 ～ 0x0C ： 1 ～ 0x1F (=1 ～ 9999) ： (=1 ～ 12) ： (=1 ～ 31)\n\nData Type : unsigned char×4\nData Size(Byte) : 4\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: CurrentDateSetting
  CurrentDateSettingSet:
    procedure: set
    epc: 152
    size: '4'
    announce: undefined
    doc: "Current date (YYYY：MM：DD format)\n\n1 ～ 0x270F ： 1 ～ 0x0C ： 1 ～ 0x1F (=1 ～ 9999) ： (=1 ～ 12) ： (=1 ～ 31)\n\nData Type : unsigned char×4\nData Size(Byte) : 4\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: CurrentDateSetting
      propertyValue:
        type: array
        const: false
        value:
          - 0
          - 0
          - 0
          - 0
  PowerLimitSettingGet:
    procedure: get
    epc: 153
    size: '2'
    announce: undefined
    doc: "This property indicates the power limit setting in watts.\n\n0x0000~0xFFFF（0-65535W）\n\nData Type : unsigned short\nData Size(Byte) : 2\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: PowerLimitSetting
  PowerLimitSettingSet:
    procedure: set
    epc: 153
    size: '2'
    announce: undefined
    doc: "This property indicates the power limit setting in watts.\n\n0x0000~0xFFFF（0-65535W）\n\nData Type : unsigned short\nData Size(Byte) : 2\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: PowerLimitSetting
      propertyValue:
        type: array
        const: false
        value:
          - 0
          - 0
  CumulativeOperatingTimeGet:
    procedure: get
    epc: 154
    size: '5'
    announce: undefined
    doc: "This property indicates the cumulative number of days, hours, minutes or seconds for which the device has operated, using 1 byte for the unit and 4 bytes for the time.\n\nFirst byte: Indicates the unit.\nSecond： 0x41; Minute： 0x42; Hour： 0x43; Day:0x44\nSecond to fifth bytes ：\nIndicates the elapsed time in the unit specified by the first byte. 0x00000000-0xFFFFFFFF (0-4294967295)\n\nData Type : unsigned char + unsigned long\nData Size(Byte) : 1+4 Byte\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: CumulativeOperatingTime
  CumulativeOperatingTimeSet:
    procedure: set
    epc: 154
    size: '5'
    announce: undefined
    doc: "This property indicates the cumulative number of days, hours, minutes or seconds for which the device has operated, using 1 byte for the unit and 4 bytes for the time.\n\nFirst byte: Indicates the unit.\nSecond： 0x41; Minute： 0x42; Hour： 0x43; Day:0x44\nSecond to fifth bytes ：\nIndicates the elapsed time in the unit specified by the first byte. 0x00000000-0xFFFFFFFF (0-4294967295)\n\nData Type : unsigned char + unsigned long\nData Size(Byte) : 1+4 Byte\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: CumulativeOperatingTime
      propertyValue:
        type: array
        const: false
        value:
          - 0
          - 0
          - 0
          - 0
          - 0
  StatusChangeAnnouncementPropertyMapGet:
    procedure: get
    epc: 157
    size: Max17
    announce: undefined
    doc: "See Appendix 1.\n\nData Type : unsigned char×(MAX17)\nData Size(Byte) : Max.17\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : mandatory"
    params:
      propertyName:
        type: string
        const: true
        value: StatusChangeAnnouncementPropertyMap
  StatusChangeAnnouncementPropertyMapSet:
    procedure: set
    epc: 157
    size: Max17
    announce: undefined
    doc: "See Appendix 1.\n\nData Type : unsigned char×(MAX17)\nData Size(Byte) : Max.17\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : mandatory"
    params:
      propertyName:
        type: string
        const: true
        value: StatusChangeAnnouncementPropertyMap
      propertyValue:
        type: array
        const: false
        value:
          - 0
  SetPropertyMapGet:
    procedure: get
    epc: 158
    size: Max17
    announce: undefined
    doc: "See Appendix 1.\n\nData Type : unsigned char×(MAX17)\nData Size(Byte) : Max.17\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : mandatory"
    params:
      propertyName:
        type: string
        const: true
        value: SetPropertyMap
  SetPropertyMapSet:
    procedure: set
    epc: 158
    size: Max17
    announce: undefined
    doc: "See Appendix 1.\n\nData Type : unsigned char×(MAX17)\nData Size(Byte) : Max.17\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : mandatory"
    params:
      propertyName:
        type: string
        const: true
        value: SetPropertyMap
      propertyValue:
        type: array
        const: false
        value:
          - 0
  GetPropertyMapGet:
    procedure: get
    epc: 159
    size: Max17
    announce: undefined
    doc: "See Appendix 1.\n\nData Type : unsigned char×(MAX17)\nData Size(Byte) : Max.17\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : mandatory"
    params:
      propertyName:
        type: string
        const: true
        value: GetPropertyMap
  GetPropertyMapSet:
    procedure: set
    epc: 159
    size: Max17
    announce: undefined
    doc: "See Appendix 1.\n\nData Type : unsigned char×(MAX17)\nData Size(Byte) : Max.17\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : mandatory"
    params:
      propertyName:
        type: string
        const: true
        value: GetPropertyMap
      propertyValue:
        type: array
        const: false
        value:
          - 0
  DoorOpenCloseStatusGet:
    procedure: get
    epc: 176
    size: '1'
    announce: undefined
    doc: "Used to acquire the status (i.e. open or closed) of the door of the combination microwave oven.\n\nDoor open = 0x41, door closed = 0x42\n\nName : Door open/close status\nEPC : 0xB0\nData Type : unsigned char\nData Size(Byte) : 1 byte\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: DoorOpenCloseStatus
  DoorOpenCloseStatusSet:
    procedure: set
    epc: 176
    size: '1'
    announce: undefined
    doc: "Used to acquire the status (i.e. open or closed) of the door of the combination microwave oven.\n\nDoor open = 0x41, door closed = 0x42\n\nName : Door open/close status\nEPC : 0xB0\nData Type : unsigned char\nData Size(Byte) : 1 byte\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: DoorOpenCloseStatus
      propertyValue:
        type: array
        const: false
        value:
          - 0
  HeatingStatusGet:
    procedure: get
    epc: 177
    size: '1'
    announce: undefined
    doc: "Used to acquire the status of the combination microwave oven.\n\nInitial state = 0x40 Heating = 0x41 Heating suspended = 0x42 Reporting completion of heating cycle = 0x43 Setting = 0x44 Preheating = 0x45 Preheat temperature maintenance = 0x46 Heating temporarily stopped for manual cooking action = 0x47\n\nName : Heating status\nEPC : 0xB1\nData Type : unsigned char\nData Size(Byte) : 1 byte\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: HeatingStatus
  HeatingStatusSet:
    procedure: set
    epc: 177
    size: '1'
    announce: undefined
    doc: "Used to acquire the status of the combination microwave oven.\n\nInitial state = 0x40 Heating = 0x41 Heating suspended = 0x42 Reporting completion of heating cycle = 0x43 Setting = 0x44 Preheating = 0x45 Preheat temperature maintenance = 0x46 Heating temporarily stopped for manual cooking action = 0x47\n\nName : Heating status\nEPC : 0xB1\nData Type : unsigned char\nData Size(Byte) : 1 byte\n\nAccessRule\nAnnounce : undefined\nSet : undefined\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: HeatingStatus
      propertyValue:
        type: array
        const: false
        value:
          - 0
  HeatingSettingGet:
    procedure: get
    epc: 178
    size: '1'
    announce: undefined
    doc: "Used to specify whether to start, stop or suspend heating, and to acquire the current setting (i.e. current heating status).\n\nStart/restart heating (heating started/restarted) = 0x41 Suspend heating (heating suspended) = 0x42 Stop heating (heating stopped) = 0x43\n\nName : Heating setting\nEPC : 0xB2\nData Type : unsigned char\nData Size(Byte) : 1 byte\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: HeatingSetting
  HeatingSettingSet:
    procedure: set
    epc: 178
    size: '1'
    announce: undefined
    doc: "Used to specify whether to start, stop or suspend heating, and to acquire the current setting (i.e. current heating status).\n\nStart/restart heating (heating started/restarted) = 0x41 Suspend heating (heating suspended) = 0x42 Stop heating (heating stopped) = 0x43\n\nName : Heating setting\nEPC : 0xB2\nData Type : unsigned char\nData Size(Byte) : 1 byte\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: HeatingSetting
      propertyValue:
        type: array
        const: false
        value:
          - 0
  HeatingModeSettingGet:
    procedure: get
    epc: 224
    size: '1'
    announce: undefined
    doc: "Used to specify the heating mode of the combination microwave oven, and to acquire the current setting (i.e. current mode).\n\nMicrowave heating = 0x41 Defrosting = 0x42 Oven = 0x43 Grill = 0x44 Toaster = 0x45 Fermenting = 0x46 Stewing = 0x47 Steaming = 0x48 Two-stage microwave heating = 0x51 No mode specified = 0xFF\n\nName : Heating mode setting\nEPC : 0xE0\nData Type : unsigned char\nData Size(Byte) : 1 byte\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: HeatingModeSetting
  HeatingModeSettingSet:
    procedure: set
    epc: 224
    size: '1'
    announce: undefined
    doc: "Used to specify the heating mode of the combination microwave oven, and to acquire the current setting (i.e. current mode).\n\nMicrowave heating = 0x41 Defrosting = 0x42 Oven = 0x43 Grill = 0x44 Toaster = 0x45 Fermenting = 0x46 Stewing = 0x47 Steaming = 0x48 Two-stage microwave heating = 0x51 No mode specified = 0xFF\n\nName : Heating mode setting\nEPC : 0xE0\nData Type : unsigned char\nData Size(Byte) : 1 byte\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: HeatingModeSetting
      propertyValue:
        type: array
        const: false
        value:
          - 0
  AutomaticHeatingSettingGet:
    procedure: get
    epc: 225
    size: '1'
    announce: undefined
    doc: "Used to specify whether or not to use the combination microwave oven�fs automatic heating mode, and to acquire the current setting.\n\nAutomatic = 0x41 Manual = 0x42 Not specified = 0xFF\n\nName : Automatic heating setting\nEPC : 0xE1\nData Type : unsigned char\nData Size(Byte) : 1 byte\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: AutomaticHeatingSetting
  AutomaticHeatingSettingSet:
    procedure: set
    epc: 225
    size: '1'
    announce: undefined
    doc: "Used to specify whether or not to use the combination microwave oven�fs automatic heating mode, and to acquire the current setting.\n\nAutomatic = 0x41 Manual = 0x42 Not specified = 0xFF\n\nName : Automatic heating setting\nEPC : 0xE1\nData Type : unsigned char\nData Size(Byte) : 1 byte\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: AutomaticHeatingSetting
      propertyValue:
        type: array
        const: false
        value:
          - 0
  AutomaticHeatingLevelSettingGet:
    procedure: get
    epc: 226
    size: '1'
    announce: undefined
    doc: "Used to specify, by selecting a level from among the five predefined levels, the level of automatic heating for the option specified by the �gautomatic heating menu setting�h property, and to acquire the current setting.\n\n0x31 to 0x35 (lowest to highest) Not specified = 0xFF\n\nName : Automatic heating level setting\nEPC : 0xE2\nData Type : unsigned cha\nData Size(Byte) : 1 bytes\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: AutomaticHeatingLevelSetting
  AutomaticHeatingLevelSettingSet:
    procedure: set
    epc: 226
    size: '1'
    announce: undefined
    doc: "Used to specify, by selecting a level from among the five predefined levels, the level of automatic heating for the option specified by the �gautomatic heating menu setting�h property, and to acquire the current setting.\n\n0x31 to 0x35 (lowest to highest) Not specified = 0xFF\n\nName : Automatic heating level setting\nEPC : 0xE2\nData Type : unsigned cha\nData Size(Byte) : 1 bytes\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: AutomaticHeatingLevelSetting
      propertyValue:
        type: array
        const: false
        value:
          - 0
  AutomaticHeatingMenuSettingGet:
    procedure: get
    epc: 208
    size: '1'
    announce: undefined
    doc: "Used, when the value of the �gautomatic heating setting�h property is 0x41 (= automatic heating), to select an automatic heating cycle, and to acquire the current setting.\n\n0 to 0xFE: Automatic heating cycle code (See the automatic heating cycle code table in the subsection entitled �gAutomatic heating menu setting.�h) No automatic heating cycle specified = 0xFF\n\nName : Automatic heating menu setting\nEPC : 0xD0\nData Type : unsigned cha\nData Size(Byte) : 1 bytes\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: AutomaticHeatingMenuSetting
  AutomaticHeatingMenuSettingSet:
    procedure: set
    epc: 208
    size: '1'
    announce: undefined
    doc: "Used, when the value of the �gautomatic heating setting�h property is 0x41 (= automatic heating), to select an automatic heating cycle, and to acquire the current setting.\n\n0 to 0xFE: Automatic heating cycle code (See the automatic heating cycle code table in the subsection entitled �gAutomatic heating menu setting.�h) No automatic heating cycle specified = 0xFF\n\nName : Automatic heating menu setting\nEPC : 0xD0\nData Type : unsigned cha\nData Size(Byte) : 1 bytes\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: AutomaticHeatingMenuSetting
      propertyValue:
        type: array
        const: false
        value:
          - 0
  OvenModeSettingGet:
    procedure: get
    epc: 209
    size: '1'
    announce: undefined
    doc: "Used, when the value of the �gheating mode setting�h property (EPC = 0xE0) is 0x43 (= oven), to specify the sub-mode to use, and to acquire the current setting.\n\nAutomatic selection mode = 0x40 Convection oven mode = 0x41 Circulation oven mode = 0x42 Hybrid oven mode = 0x43 No sub-mode specified = 0xFF\n\nName : Oven mode setting\nEPC : 0xD1\nData Type : unsigned cha\nData Size(Byte) : 1 bytes\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: OvenModeSetting
  OvenModeSettingSet:
    procedure: set
    epc: 209
    size: '1'
    announce: undefined
    doc: "Used, when the value of the �gheating mode setting�h property (EPC = 0xE0) is 0x43 (= oven), to specify the sub-mode to use, and to acquire the current setting.\n\nAutomatic selection mode = 0x40 Convection oven mode = 0x41 Circulation oven mode = 0x42 Hybrid oven mode = 0x43 No sub-mode specified = 0xFF\n\nName : Oven mode setting\nEPC : 0xD1\nData Type : unsigned cha\nData Size(Byte) : 1 bytes\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: OvenModeSetting
      propertyValue:
        type: array
        const: false
        value:
          - 0
  OvenPreheatingSettingGet:
    procedure: get
    epc: 213
    size: '1'
    announce: undefined
    doc: "Used, when the value of the �gheating mode setting�h property (EPC = 0xE0) is 0x43 (oven), to specify whether or not to preheat the chamber for the selected oven sub-mode, and to acquire the current setting.\n\nWith preheating = 0x41 Without preheating = 0x42 Not specified = 0xFF\n\nName : Oven preheating setting\nEPC : 0xD5\nData Type : unsigned char\nData Size(Byte) : 1 bytes\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: OvenPreheatingSetting
  OvenPreheatingSettingSet:
    procedure: set
    epc: 213
    size: '1'
    announce: undefined
    doc: "Used, when the value of the �gheating mode setting�h property (EPC = 0xE0) is 0x43 (oven), to specify whether or not to preheat the chamber for the selected oven sub-mode, and to acquire the current setting.\n\nWith preheating = 0x41 Without preheating = 0x42 Not specified = 0xFF\n\nName : Oven preheating setting\nEPC : 0xD5\nData Type : unsigned char\nData Size(Byte) : 1 bytes\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: OvenPreheatingSetting
      propertyValue:
        type: array
        const: false
        value:
          - 0
  FermentingModeSettingGet:
    procedure: get
    epc: 214
    size: '1'
    announce: undefined
    doc: "Used, when the value of the �gheating mode setting�h property (EPC = 0xE0) is 0x46 (= fermenting), to specify the sub-mode to use, and to acquire the current setting.\n\nAutomatic selection mode = 0x40 Convection fermentation mode = 0x41 Circulation fermentation mode = 0x42 Hybrid fermentation mode = 0x43 Microwave fermentation mode = 0x51 No mode specified = 0xFF\n\nName : Fermenting mode setting\nEPC : 0xD6\nData Type : unsigned char\nData Size(Byte) : 1 bytes\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: FermentingModeSetting
  FermentingModeSettingSet:
    procedure: set
    epc: 214
    size: '1'
    announce: undefined
    doc: "Used, when the value of the �gheating mode setting�h property (EPC = 0xE0) is 0x46 (= fermenting), to specify the sub-mode to use, and to acquire the current setting.\n\nAutomatic selection mode = 0x40 Convection fermentation mode = 0x41 Circulation fermentation mode = 0x42 Hybrid fermentation mode = 0x43 Microwave fermentation mode = 0x51 No mode specified = 0xFF\n\nName : Fermenting mode setting\nEPC : 0xD6\nData Type : unsigned char\nData Size(Byte) : 1 bytes\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: FermentingModeSetting
      propertyValue:
        type: array
        const: false
        value:
          - 0
  ChamberTemperatureSettingGet:
    procedure: get
    epc: 227
    size: '2'
    announce: undefined
    doc: "Used, when the value of the �gheating mode setting�h property (EPC = 0xE0) is 0x43 (= oven) or 0x46 (= fermenting), to specify the temperature in the chamber in 0.1��C increments, and to acquire the current setting.\n\n0xF554 to 0x7FFE (-273.2 to 3276.6��C) 0x8001: Automatic 0x8002: Not specified\n\nName : Chamber temperature setting\nEPC : 0xE3\nData Type : \nData Size(Byte) : 2\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: ChamberTemperatureSetting
  ChamberTemperatureSettingSet:
    procedure: set
    epc: 227
    size: '2'
    announce: undefined
    doc: "Used, when the value of the �gheating mode setting�h property (EPC = 0xE0) is 0x43 (= oven) or 0x46 (= fermenting), to specify the temperature in the chamber in 0.1��C increments, and to acquire the current setting.\n\n0xF554 to 0x7FFE (-273.2 to 3276.6��C) 0x8001: Automatic 0x8002: Not specified\n\nName : Chamber temperature setting\nEPC : 0xE3\nData Type : \nData Size(Byte) : 2\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: ChamberTemperatureSetting
      propertyValue:
        type: array
        const: false
        value:
          - 0
          - 0
  FoodTemperatureSettingGet:
    procedure: get
    epc: 228
    size: '2'
    announce: undefined
    doc: "Used to specify the as-heated food temperature in 0.1��C increments, and to acquire the current setting.\n\n0xF554 to 0x7FFE (-273.2 to 3276.6��) 0x8002: Not specified\n\nName : Food temperature setting\nEPC : 0xE4\nData Type : \nData Size(Byte) : 2\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: FoodTemperatureSetting
  FoodTemperatureSettingSet:
    procedure: set
    epc: 228
    size: '2'
    announce: undefined
    doc: "Used to specify the as-heated food temperature in 0.1��C increments, and to acquire the current setting.\n\n0xF554 to 0x7FFE (-273.2 to 3276.6��) 0x8002: Not specified\n\nName : Food temperature setting\nEPC : 0xE4\nData Type : \nData Size(Byte) : 2\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: FoodTemperatureSetting
      propertyValue:
        type: array
        const: false
        value:
          - 0
          - 0
  HeatingTimeSettingGet:
    procedure: get
    epc: 229
    size: '3'
    announce: undefined
    doc: "Used to specify the duration of heating in the HH:MM:SS format, and to acquire the current setting.\n\n0 to 0x17: 0 to 0x3B: 0 to 0x3B (= 0 to 23) (= 0 to 59) (= 0 to 59)\n\nName : Heating time setting\nEPC : 0xE5\nData Type : \nData Size(Byte) : 3\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: HeatingTimeSetting
  HeatingTimeSettingSet:
    procedure: set
    epc: 229
    size: '3'
    announce: undefined
    doc: "Used to specify the duration of heating in the HH:MM:SS format, and to acquire the current setting.\n\n0 to 0x17: 0 to 0x3B: 0 to 0x3B (= 0 to 23) (= 0 to 59) (= 0 to 59)\n\nName : Heating time setting\nEPC : 0xE5\nData Type : \nData Size(Byte) : 3\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: HeatingTimeSetting
      propertyValue:
        type: array
        const: false
        value:
          - 0
          - 0
          - 0
  RemainingHeatingTimeSettingGet:
    procedure: get
    epc: 230
    size: '3'
    announce: undefined
    doc: "Used to specify the time remaining to complete the heating cycle in the HH:MM:SS format, and to acquire the current setting.\n\n0 to 0x17: 0 to 0x3B: 0 to 0x3B (= 0 to 23) (= 0 to 59) (= 0 to 59)\n\nName : Remaining heating time setting\nEPC : 0xE6\nData Type : \nData Size(Byte) : 3\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: RemainingHeatingTimeSetting
  RemainingHeatingTimeSettingSet:
    procedure: set
    epc: 230
    size: '3'
    announce: undefined
    doc: "Used to specify the time remaining to complete the heating cycle in the HH:MM:SS format, and to acquire the current setting.\n\n0 to 0x17: 0 to 0x3B: 0 to 0x3B (= 0 to 23) (= 0 to 59) (= 0 to 59)\n\nName : Remaining heating time setting\nEPC : 0xE6\nData Type : \nData Size(Byte) : 3\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: RemainingHeatingTimeSetting
      propertyValue:
        type: array
        const: false
        value:
          - 0
          - 0
          - 0
  MicrowaveHeatingPowerSettingGet:
    procedure: get
    epc: 231
    size: '2'
    announce: undefined
    doc: "Used, when the value of the �gheating mode setting�h property (EPC = 0xE0) is 0x41 (= microwave heating), 0x42 (= defrosting), 0x47 (= stewing) or 0x48 (= steaming) or when the value of the �gheating mode setting�h property (EPC = 0xE0) is 0x46 (= fermenting) and the value of the �gfermenting mode setting�h property (EPC = 0xD6) is 0x51 (= microwave fermentation mode), to specify the microwave heating power in 1W increments, and to acquire the current setting.\n\n0x0000 to 0xFFFD (0 to 65533W)\n\nName : Microwave heating power setting\nEPC : 0xE7\nData Type : \nData Size(Byte) : 2\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: MicrowaveHeatingPowerSetting
  MicrowaveHeatingPowerSettingSet:
    procedure: set
    epc: 231
    size: '2'
    announce: undefined
    doc: "Used, when the value of the �gheating mode setting�h property (EPC = 0xE0) is 0x41 (= microwave heating), 0x42 (= defrosting), 0x47 (= stewing) or 0x48 (= steaming) or when the value of the �gheating mode setting�h property (EPC = 0xE0) is 0x46 (= fermenting) and the value of the �gfermenting mode setting�h property (EPC = 0xD6) is 0x51 (= microwave fermentation mode), to specify the microwave heating power in 1W increments, and to acquire the current setting.\n\n0x0000 to 0xFFFD (0 to 65533W)\n\nName : Microwave heating power setting\nEPC : 0xE7\nData Type : \nData Size(Byte) : 2\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: MicrowaveHeatingPowerSetting
      propertyValue:
        type: array
        const: false
        value:
          - 0
          - 0
  PromptMessageSettingGet:
    procedure: get
    epc: 232
    size: '8'
    announce: undefined
    doc: "Used, when it is necessary to instruct the combination microwave oven to temporarily stop heating at a point during a heating cycle to allow the user to perform manual reversing, mixing, etc. and display a message to instruct the user on the manual action to be performed, to specify the prompt message to be displayed and the timing of the message (in terms of a percentage of the total duration of the heating cycle that is allowed to elapse (from the start of the heating cycle) before the message is displayed), and to acquire the current settings. Up to 4 messages may be specified.\n\nFirst byte: Prompt message code (See the prompt message code table in the subsection entitled �gPrompt message setting.�h) Second byte: Timing value (0 to 0x64 (0 to 100%))\n\nName : Prompt message setting\nEPC : 0xE8\nData Type : \nData Size(Byte) : 8\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: PromptMessageSetting
  PromptMessageSettingSet:
    procedure: set
    epc: 232
    size: '8'
    announce: undefined
    doc: "Used, when it is necessary to instruct the combination microwave oven to temporarily stop heating at a point during a heating cycle to allow the user to perform manual reversing, mixing, etc. and display a message to instruct the user on the manual action to be performed, to specify the prompt message to be displayed and the timing of the message (in terms of a percentage of the total duration of the heating cycle that is allowed to elapse (from the start of the heating cycle) before the message is displayed), and to acquire the current settings. Up to 4 messages may be specified.\n\nFirst byte: Prompt message code (See the prompt message code table in the subsection entitled �gPrompt message setting.�h) Second byte: Timing value (0 to 0x64 (0 to 100%))\n\nName : Prompt message setting\nEPC : 0xE8\nData Type : \nData Size(Byte) : 8\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: PromptMessageSetting
      propertyValue:
        type: array
        const: false
        value:
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
  GaccessoriesToCombinationMicrowaveOvenHSettingGet:
    procedure: get
    epc: 233
    size: '2'
    announce: undefined
    doc: "Used to specify, by means of a 2-byte bit map, what accessory or accessories to the combination microwave oven to use, and to acquire the current setting.\n\nThe value contained in a bit in the bit map shall be �g1�h if the accessory represented by that bit is used and �g0�h if the accessory represented by that bit is not used (See the bitmap composition table in the subsection entitled �g�fAccessories to combination microwave oven�f setting�h).\n\nName : �gAccessories to combination microwave oven�h setting\nEPC : 0xE9\nData Type : \nData Size(Byte) : 2\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: GaccessoriesToCombinationMicrowaveOvenHSetting
  GaccessoriesToCombinationMicrowaveOvenHSettingSet:
    procedure: set
    epc: 233
    size: '2'
    announce: undefined
    doc: "Used to specify, by means of a 2-byte bit map, what accessory or accessories to the combination microwave oven to use, and to acquire the current setting.\n\nThe value contained in a bit in the bit map shall be �g1�h if the accessory represented by that bit is used and �g0�h if the accessory represented by that bit is not used (See the bitmap composition table in the subsection entitled �g�fAccessories to combination microwave oven�f setting�h).\n\nName : �gAccessories to combination microwave oven�h setting\nEPC : 0xE9\nData Type : \nData Size(Byte) : 2\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: GaccessoriesToCombinationMicrowaveOvenHSetting
      propertyValue:
        type: array
        const: false
        value:
          - 0
          - 0
  DisplayCharacterStringSettingGet:
    procedure: get
    epc: 234
    size: '40'
    announce: undefined
    doc: "Used to input character strings (up to 20 characters) to use on the display of the combination microwave oven.\n\nShift-JIS code characters x 20\n\nName : Display character string setting\nEPC : 0xEA\nData Type : \nData Size(Byte) : 40\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : undefined"
    params:
      propertyName:
        type: string
        const: true
        value: DisplayCharacterStringSetting
  DisplayCharacterStringSettingSet:
    procedure: set
    epc: 234
    size: '40'
    announce: undefined
    doc: "Used to input character strings (up to 20 characters) to use on the display of the combination microwave oven.\n\nShift-JIS code characters x 20\n\nName : Display character string setting\nEPC : 0xEA\nData Type : \nData Size(Byte) : 40\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : undefined"
    params:
      propertyName:
        type: string
        const: true
        value: DisplayCharacterStringSetting
      propertyValue:
        type: array
        const: false
        value:
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
  TwoStageMicrowaveHeatingSettingDurationGet:
    procedure: get
    epc: 235
    size: '6'
    announce: undefined
    doc: "Used, when the value of the �gheating mode setting�h property (EPC = 0xE0) is 0x51 (two-stage microwave heating), to specify the duration of the first and second microwave heating cycles in the HH:MM:SS format, and to acquire the current setting. Three bytes shall be used for each heating cycle, with the first and second sets of bytes used for the first and second heating cycles, respectively.\n\nDuration of first microwave heating cycle (first through third bytes): 0 to 0x17: 0 to 0x3B: 0 to 0x3B (= 0 to 23): (= 0 to 59): (= 0 to 59) Duration of second microwave heating cycle (fourth through sixth bytes): 0 to 0x17: 0 to 0x3B: 0 to 0x3B (= 0 to 23): (= 0 to 59): (= 0 to 59)\n\nName : Two-stage microwave heating setting (duration)\nEPC : 0xEB\nData Type : \nData Size(Byte) : 6\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: TwoStageMicrowaveHeatingSettingDuration
  TwoStageMicrowaveHeatingSettingDurationSet:
    procedure: set
    epc: 235
    size: '6'
    announce: undefined
    doc: "Used, when the value of the �gheating mode setting�h property (EPC = 0xE0) is 0x51 (two-stage microwave heating), to specify the duration of the first and second microwave heating cycles in the HH:MM:SS format, and to acquire the current setting. Three bytes shall be used for each heating cycle, with the first and second sets of bytes used for the first and second heating cycles, respectively.\n\nDuration of first microwave heating cycle (first through third bytes): 0 to 0x17: 0 to 0x3B: 0 to 0x3B (= 0 to 23): (= 0 to 59): (= 0 to 59) Duration of second microwave heating cycle (fourth through sixth bytes): 0 to 0x17: 0 to 0x3B: 0 to 0x3B (= 0 to 23): (= 0 to 59): (= 0 to 59)\n\nName : Two-stage microwave heating setting (duration)\nEPC : 0xEB\nData Type : \nData Size(Byte) : 6\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: TwoStageMicrowaveHeatingSettingDuration
      propertyValue:
        type: array
        const: false
        value:
          - 0
          - 0
          - 0
          - 0
          - 0
          - 0
  TwoStageMicrowaveHeatingSettingHeatingPowerGet:
    procedure: get
    epc: 236
    size: '4'
    announce: undefined
    doc: "Used, when the value of the �gheating mode setting�h property (EPC = 0xE0) is 0x51 (two-stage microwave heating), to specify the heating power for the first and second microwave heating cycles in 1W increments, and to acquire the current setting. Two bytes shall be used for each heating cycle, with the first and second pairs of bytes used for the first and second heating cycles, respectively.\n\nHeating power for first microwave heating cycle (first and second bytes): 0x0000 to 0xFFFD (0 to 65533W) Heating power for second microwave heating cycle (third and fourth bytes): 0x0000 to 0xFFFD (0 to 65533W)\n\nName : Two-stage microwave heating setting (heating power)\nEPC : 0xEC\nData Type : \nData Size(Byte) : 4\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: TwoStageMicrowaveHeatingSettingHeatingPower
  TwoStageMicrowaveHeatingSettingHeatingPowerSet:
    procedure: set
    epc: 236
    size: '4'
    announce: undefined
    doc: "Used, when the value of the �gheating mode setting�h property (EPC = 0xE0) is 0x51 (two-stage microwave heating), to specify the heating power for the first and second microwave heating cycles in 1W increments, and to acquire the current setting. Two bytes shall be used for each heating cycle, with the first and second pairs of bytes used for the first and second heating cycles, respectively.\n\nHeating power for first microwave heating cycle (first and second bytes): 0x0000 to 0xFFFD (0 to 65533W) Heating power for second microwave heating cycle (third and fourth bytes): 0x0000 to 0xFFFD (0 to 65533W)\n\nName : Two-stage microwave heating setting (heating power)\nEPC : 0xEC\nData Type : \nData Size(Byte) : 4\n\nAccessRule\nAnnounce : undefined\nSet : optional\nGet : optional"
    params:
      propertyName:
        type: string
        const: true
        value: TwoStageMicrowaveHeatingSettingHeatingPower
      propertyValue:
        type: array
        const: false
        value:
          - 0
          - 0
          - 0
          - 0

