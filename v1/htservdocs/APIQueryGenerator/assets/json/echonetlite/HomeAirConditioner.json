{
	"name":"HomeAirConditioner","methods":[
		{"name":"OperationStatus","epc":"0x80","size":"1","announce":"undefined","set":"optional","get":"mandatory","doc":"This property indicates the ON/OFF status.<br><br>ON＝0x30，OFF＝0x31<br><br>Data Type : unsigned char<br>Data Size(Byte) : 1<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : mandatory<br><br>Announcement at status change<br>"},
		{"name":"InstallationLocation","epc":"0x81","size":"1","announce":"undefined","set":"mandatory","get":"mandatory","doc":"This property indicates the installation location<br><br>See “2.2 ‘Installation location’ property.”<br><br>Data Type : unsigned char<br>Data Size(Byte) : 1<br><br>AccessRule<br>Announce : undefined<br>Set : mandatory<br>Get : mandatory<br><br>Announcement at status change<br>"},
		{"name":"StandardVersionInformation","epc":"0x82","size":"4","announce":"undefined","set":"undefined","get":"mandatory","doc":"This property indicates the version number of the corresponding standard.<br><br>First byte: Fixed at 0x00 (for future reserved). <br>Second byte: Fixed at 0x00 (for future reserved). <br>Third byte: Indicates the order of release in the ASCII format. <br>Fourth byte: Fixed at 0x00 (for future reserved).<br><br>Data Type : unsigned char×4<br>Data Size(Byte) : 4<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : mandatory<br>"},
		{"name":"IdentificationNumber","epc":"0x83","size":"9or17","announce":"undefined","set":"undefined","get":"optional","doc":"A number that allows each object to be uniquely identified.<br><br>First byte: lower-layer communication ID field<br>0x01－0xFD：This is a communication protocol used in the lower-layer communication and is set arbitrarily according to the protocol class in the case where unique number is assigned (not used in ECHONET Lite).<br>0x11－0x1F: Power line Communication Protocol A and B systems<br>0x31-0x3F: Designated low-powor radio<br>0x41-0x4F: Extended HBS<br>0x51-0x5F: IrDA<br>0x61-0x6F: LonTalk®<br>0x71-0x7F: BlueTooth<br>0x81-0x8F: Ethernet<br>0x91-0x9F: IEEE802.11/11B<br>0xA1: Power line Communication Protocol C systems<br>0xB2：IPv6/6LoWPAN<br>0xFE：2－17 bytes are defined by the manufacturer, and are set according to the type.<br>0xFF：2－9 bytes are defined when randomly generated protocol is used in the lower-layer communication.<br>0x00：Identification number is not set.<br>Second and succeeding bytes: unique number field<br><br>Data Type : unsigned char<br>Data Size(Byte) : 9 or 17<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : optional<br>"},
		{"name":"MeasuredInstantaneousPowerConsumption","epc":"0x84","size":"2","announce":"undefined","set":"undefined","get":"optional","doc":"This property indicates the instantaneous power consumption of the device in watts.<br><br>0x0000-0xFFFF（0-65535W）<br><br>Data Type : unsigned short<br>Data Size(Byte) : 2<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : optional<br>"},
		{"name":"MeasuredCumulativePowerConsumption","epc":"0x85","size":"4","announce":"undefined","set":"undefined","get":"optional","doc":"This property indicates the cumulative power consumption of the device in increments of 0.001kWh.<br><br>0x0-0x3B9AC9FF（0-999,999.999kWh）<br><br>Data Type : unsigned long<br>Data Size(Byte) : 4<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : optional<br>"},
		{"name":"ManufacturersFaultCode","epc":"0x86","size":"Max225","announce":"undefined","set":"undefined","get":"optional","doc":"This property indicates the manufacturer-defined fault code.<br><br>First byte: Indicates the data size of the fault code field.<br>Second to fourth bytes: Manufacturer code<br>Fifth and succeeding bytes: Field for manufacturer-defined fault code<br><br>Data Type : unsigned char×(MAX)225<br>Data Size(Byte) : Max 225<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : optional<br>"},
		{"name":"CurrentLimitSetting","epc":"0x87","size":"1","announce":"undefined","set":"optional","get":"optional","doc":"This property indicates the current limit setting (0-100%).<br>0x00-0x64 （=0-100%）<br><br>Data Type : unsigned char<br>Data Size(Byte) : 1<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"FaultStatus","epc":"0x88","size":"1","announce":"undefined","set":"undefined","get":"mandatory","doc":"This property indicates whether a fault (e.g. a sensor trouble) has occurred or not.<br><br>Fault occurred＝0x41, No fault has occurred＝0x42<br><br>Data Type : unsigned char<br>Data Size(Byte) : 1<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : mandatory<br><br>Announcement at status change<br>"},
		{"name":"FaultDescription","epc":"0x89","size":"2","announce":"undefined","set":"undefined","get":"optional","doc":"Describes the fault.<br><br>See “2.5 ‘Fault Description’ Property.”<br><br>Data Type : unsigned short<br>Data Size(Byte) : 2<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : optional<br>"},
		{"name":"ManufacturerCode","epc":"0x8A","size":"3","announce":"undefined","set":"undefined","get":"mandatory","doc":"3-byte manufacturer code<br><br>(Defined by the ECHONET Consortium.)<br><br>Data Type : unsigned char×3<br>Data Size(Byte) : 3<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : mandatory<br>"},
		{"name":"￼￼￼￼￼￼￼￼￼￼￼￼BusinessFacilityCode","epc":"0x8B","size":"3","announce":"undefined","set":"undefined","get":"optional","doc":"3-byte business facility code<br><br>（Defined by each manufacturer.）<br><br>Data Type : unsigned char×3<br>Data Size(Byte) : 3<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : optional<br>"},
		{"name":"ProductCode","epc":"0x8C","size":"12","announce":"undefined","set":"undefined","get":"optional","doc":"Identifies the product usingASCI I code.<br>（Defined by each manufacturer.）<br><br>Data Type : unsigned char×12<br>Data Size(Byte) : 12<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : optional<br>"},
		{"name":"ProductionNumber","epc":"0x8D","size":"12","announce":"undefined","set":"undefined","get":"optional","doc":"This property indicates the production number using ASCI I code.<br><br>（Defined by each manufacturer.）<br><br>Data Type : unsigned char×12<br>Data Size(Byte) : 12<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : optional<br>"},
		{"name":"ProductionDate","epc":"0x8E","size":"4","announce":"undefined","set":"undefined","get":"optional","doc":"4-byte production date code<br><br>This property indicates the product ion date in the YYMD format (1 character = 1 byte) .<br>YY： Year (e.g. 1999＝ 0x07CF)<br>M： Month (e.g. December＝0x0C)<br>D： Day (e.g. 20th＝ 0x14)<br><br>Data Type : unsigned char×4<br>Data Size(Byte) : 4<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : optional<br>"},
		{"name":"PowerSavingOperationSetting","epc":"0x8F","size":"1","announce":"undefined","set":"optional","get":"optional","doc":"This property indicates whether the device is operating in power-saving mode.<br><br>Operating in power-saving mode =0x41<br>Operating in normal operation mode =0x42<br><br>Data Type : unsigned char<br>Data Size(Byte) : 1<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"PositionInformation","epc":"0x93","size":"16","announce":"undefined","set":"optional","get":"optional","doc":"This property indicates the latitude, longitude and altitude of the installation location.<br><br>Data Type : unsigned char×16<br>Data Size(Byte) : 16<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br><br>Announcement at status change<br>"},
		{"name":"CurrentTimeSetting","epc":"0x97","size":"2","announce":"undefined","set":"optional","get":"optional","doc":"Current time (HH：MM format)<br><br>0x00-0x17：0x00-0x3B（ ＝ 0-23）：（ ＝ 0-59）<br><br>Data Type : unsigned char×2<br>Data Size(Byte) : 2<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"CurrentDateSetting","epc":"0x98","size":"4","announce":"undefined","set":"optional","get":"optional","doc":"Current date (YYYY：MM：DD format)<br><br>1 ～ 0x270F ： 1 ～ 0x0C ： 1 ～ 0x1F (=1 ～ 9999) ： (=1 ～ 12) ： (=1 ～ 31)<br><br>Data Type : unsigned char×4<br>Data Size(Byte) : 4<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"PowerLimitSetting","epc":"0x99","size":"2","announce":"undefined","set":"optional","get":"optional","doc":"This property indicates the power limit setting in watts.<br><br>0x0000~0xFFFF（0-65535W）<br><br>Data Type : unsigned short<br>Data Size(Byte) : 2<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"CumulativeOperatingTime","epc":"0x9A","size":"5","announce":"undefined","set":"undefined","get":"optional","doc":"This property indicates the cumulative number of days, hours, minutes or seconds for which the device has operated, using 1 byte for the unit and 4 bytes for the time.<br><br>First byte: Indicates the unit.<br>Second： 0x41; Minute： 0x42; Hour： 0x43; Day:0x44<br>Second to fifth bytes ：<br>Indicates the elapsed time in the unit specified by the first byte. 0x00000000-0xFFFFFFFF (0-4294967295)<br><br>Data Type : unsigned char + unsigned long<br>Data Size(Byte) : 1+4 Byte<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : optional<br>"},
		{"name":"StatusChangeAnnouncementPropertyMap","epc":"0x9D","size":"Max17","announce":"undefined","set":"undefined","get":"mandatory","doc":"See Appendix 1.<br><br>Data Type : unsigned char×(MAX17)<br>Data Size(Byte) : Max.17<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : mandatory<br>"},
		{"name":"SetPropertyMap","epc":"0x9E","size":"Max17","announce":"undefined","set":"undefined","get":"mandatory","doc":"See Appendix 1.<br><br>Data Type : unsigned char×(MAX17)<br>Data Size(Byte) : Max.17<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : mandatory<br>"},
		{"name":"GetPropertyMap","epc":"0x9F","size":"Max17","announce":"undefined","set":"undefined","get":"mandatory","doc":"See Appendix 1.<br><br>Data Type : unsigned char×(MAX17)<br>Data Size(Byte) : Max.17<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : mandatory<br>"},
		{"name":"OperationModeSetting","epc":"0xB0","size":"1","announce":"undefined","set":"mandatory","get":"mandatory","doc":"Used to specify the operation mode ( gautomatic, h  gcooling, h  gheating, h  gdehumidification, h  gair circulator h or  gother h), and to acquire the current setting.<br><br>The following values shall be used: Automatic: 0x41 Cooling: 0x42 Heating: 0x43 Dehumidification: 0x44 Air circulator: 0x45 Other: 0x40<br><br>Name : Operation mode setting<br>EPC : 0xB0<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : mandatory<br>Get : mandatory<br><br>Announcement at status change<br>"},
		{"name":"AutomaticTemperatureControlSetting","epc":"0xB1","size":"1","announce":"undefined","set":"optional","get":"optional","doc":"Used to specify whether or not to use the automatic temperature control function, and to acquire the current setting.<br><br>Automatic = 0x41 Non-automatic = 0x42<br><br>Name : Automatic temperature control setting<br>EPC : 0xB1<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"NormalHighSpeedSilentOperationSetting","epc":"0xB2","size":"1","announce":"undefined","set":"optional","get":"optional","doc":"Used to specify the type of operation ( gnormal, h  ghigh-speed h or  gsilent h), and to acquire the current setting.<br><br>Normal operation: 0x41 High-speed operation: 0x42 Silent operation: 0x43<br><br>Name : Normal/high- speed/silent operation setting<br>EPC : 0xB2<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"SetTemperatureValue","epc":"0xB3","size":"1","announce":"undefined","set":"mandatory","get":"mandatory","doc":"Used to set the temperature and to acquire the current setting.<br><br>0x00 to 0x32 (0 to 50  )<br><br>Name : Set temperature value<br>EPC : 0xB3<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : mandatory<br>Get : mandatory<br>"},
		{"name":"SetValueOfRelativeHumidityInDehumidifyingMode","epc":"0xB4","size":"1","announce":"undefined","set":"optional","get":"optional","doc":"Used to set the relative humidity for the  gdehumidification h mode and to acquire the current setting.<br><br>0x00 to 0x64 (0 to 100%)<br><br>Name : Set value of relative humidity in dehumidifying mode<br>EPC : 0xB4<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"SetTemperatureValueInCoolingMode","epc":"0xB5","size":"1","announce":"undefined","set":"optional","get":"optional","doc":"Used to set the temperature for the  gcooling h mode and to acquire the current setting.<br><br>0x00 to 0x32 (0 to 50  )<br><br>Name : Set temperature value in cooling mode<br>EPC : 0xB5<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"SetTemperatureValueInHeatingMode","epc":"0xB6","size":"1","announce":"undefined","set":"optional","get":"optional","doc":"Used to set the temperature for the  gheating h mode and to acquire the current setting.<br><br>0x00 to 0x32 (0 to 50  )<br><br>Name : Set temperature value in heating mode<br>EPC : 0xB6<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"SetTemperatureValueInDehumidifyingMode","epc":"0xB7","size":"1","announce":"undefined","set":"optional","get":"optional","doc":"Used to set the temperature for the  gdehumidification h mode and to acquire the current setting.<br><br>0x00 to 0x32 (0 to 50  )<br><br>Name : Set temperature value in dehumidifying mode<br>EPC : 0xB7<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"RatedPowerConsumption","epc":"0xB8","size":"8","announce":"undefined","set":"undefined","get":"optional","doc":"Rated power consumption in each operation mode of cooling/heating/dehumidifying/blast<br><br>0x0000.0xFFFD (0.65533W) Cooling: heating: dehumidifying: blast<br><br>Name : Rated power consumption<br>EPC : 0xB8<br>Data Type : unsigned short x 4<br>Data Size(Byte) : 8 bytes<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : optional<br>"},
		{"name":"MeasuredValueOfCurrentConsumption","epc":"0xB9","size":"2","announce":"undefined","set":"undefined","get":"optional","doc":"Measured value of current consumption<br><br>0x0000.0xFFFD (0.6553.3A)<br><br>Name : Measured value of current consumption<br>EPC : 0xB9<br>Data Type : unsigned short<br>Data Size(Byte) : 2 bytes<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : optional<br>"},
		{"name":"MeasuredValueOfRoomRelativeHumidity","epc":"0xBA","size":"1","announce":"undefined","set":"undefined","get":"optional","doc":"Measured value of room relative humidity<br><br>0x00.0x64 (0.100. C)<br><br>Name : Measured value of room relative humidity<br>EPC : 0xBA<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : optional<br>"},
		{"name":"MeasuredValueOfRoomTemperature","epc":"0xBB","size":"1","announce":"undefined","set":"undefined","get":"optional","doc":"Measured value of room temperature<br><br>0x80.0x7D (-127.125.C)<br><br>Name : Measured value of room temperature<br>EPC : 0xBB<br>Data Type : signed char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : optional<br>"},
		{"name":"SetTemperatureValueOfUserRemoteControl","epc":"0xBC","size":"1","announce":"undefined","set":"undefined","get":"optional","doc":"Set temperature value of user remote control<br><br>0x00.0x32 (0.50.C)<br><br>Name : Set temperature value of user remote control<br>EPC : 0xBC<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : optional<br>"},
		{"name":"MeasuredCooledAirTemperature","epc":"0xBD","size":"1","announce":"undefined","set":"undefined","get":"optional","doc":"This property indicates the measured cooled air temperature at the outlet.<br><br>0x81 to 0x7D (-127 to 125  C)<br><br>Name : Measured cooled air temperature<br>EPC : 0xBD<br>Data Type : signed char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : optional<br>"},
		{"name":"MeasuredOutdoorAirTemperature","epc":"0xBE","size":"1","announce":"undefined","set":"undefined","get":"optional","doc":"This property indicates the measured outdoor air temperature.<br><br>0x81 to 0x7D (-127 to 125  C)<br><br>Name : Measured outdoor air temperature<br>EPC : 0xBE<br>Data Type : signed char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : optional<br>"},
		{"name":"RelativeTemperatureSetting","epc":"0xBF","size":"1","announce":"undefined","set":"optional","get":"optional","doc":"Used to set the relative temperature relative to the target temperature for an air conditioner operation mode, and to acquire the current setting.<br><br>0x81 to 0x7D (-12.7  C to 12.5  C)<br><br>Name : Relative temperature setting<br>EPC : 0xBF<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"AirFlowRateSetting","epc":"0xA0","size":"1","announce":"undefined","set":"optional","get":"optional","doc":"Used to specify the air flow rate or use the function to automatically control the air flow rate, and to acquire the current setting. The air flow rate shall be selected from among the 8 predefined levels.<br><br>Automatic air flow rate control function used = 0x41 Air flow rate = 0x31 to 0x38<br><br>Name : Air flow rate setting<br>EPC : 0xA0<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"AutomaticControlOfAirFlowDirectionSetting","epc":"0xA1","size":"1","announce":"undefined","set":"optional","get":"optional","doc":"Used to specify whether or not to use the automatic air flow direction control function, to specify the plane(s) (vertical and/or horizontal) in which the automatic air flow direction control function is to be used, and to acquire the current setting.<br><br>Automatic = 0x41, non-automatic = 0x42, automatic (vertical) = 0x43, automatic (horizontal) = 0x44<br><br>Name : Automatic control of air flow direction setting<br>EPC : 0xA1<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"AutomaticSwingOfAirFlowSetting","epc":"0xA3","size":"1","announce":"undefined","set":"optional","get":"optional","doc":"Used to specify whether or not to use the automatic air flow swing function, to specify the plane(s) (vertical and/or horizontal) in which the automatic air flow swing function is to be used, and to acquire the current setting.<br><br>Automatic air flow swing function not used = 0x31, used (vertical) = 0x41, used (horizontal) = 0x42, used (vertical and horizontal) = 0x43<br><br>Name : Automatic swing of air flow setting<br>EPC : 0xA3<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"AirFlowDirectionVerticalSetting","epc":"0xA4","size":"1","announce":"undefined","set":"optional","get":"optional","doc":"Used to specify the air flow direction in the vertical plane by selecting a pattern from among the 5 predefined patterns, and to acquire the current setting.<br><br>Uppermost = 0x41, lowermost = 0x42, central = 0x43, midpoint between uppermost and central = 0x44, midpoint between lowermost and central = 0x45<br><br>Name : Air flow direction (vertical) setting<br>EPC : 0xA4<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"AirFlowDirectionHorizontalSetting","epc":"0xA5","size":"1","announce":"undefined","set":"optional","get":"optional","doc":"Used to specify the air flow direction(s) in the horizontal plane by selecting a pattern from among the 31 predefined patterns, and to acquire the current setting.<br><br>Rightward = 0x41, leftward = 0x42, central = 0x43, rightward and leftward = 0x44 (for a full list of the predefined patterns, see the table in the subsection defining the detailed requirements for this property.<br><br>Name : Air flow direction (horizontal) setting<br>EPC : 0xA5<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"SpecialState","epc":"0xAA","size":"1","announce":"undefined","set":"undefined","get":"optional","doc":"This property indicates if the air conditioner is in a  gspecial h state (i.e. the  gdefrosting, h  gpreheating, h or  gheat removal h state).<br><br> gNormal operation h state = 0x40,  gDefrosting h state = 0x41,  gPreheating h state = 0x42,  gHeat removal h state = 0x43<br><br>Name : Special state<br>EPC : 0xAA<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : optional<br>"},
		{"name":"NonPriorityState","epc":"0xAB","size":"1","announce":"undefined","set":"undefined","get":"optional","doc":"Used to indicate when the air conditioner is in a  gnon-priority h state.<br><br> gNormal operation h state = 0x40,  gNon-priority h state = 0x41<br><br>Name : Non-priority state<br>EPC : 0xAB<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : optional<br>"},
		{"name":"VentilationFunctionSetting","epc":"0xC0","size":"1","announce":"undefined","set":"optional","get":"optional","doc":"Used to specify whether or not to use the ventilation function, to specify the ventilation direction, and to acquire the current setting.<br><br>Ventilation function ON (outlet direction) = 0x41, ventilation function OFF = 0x42, ventilation function ON (intake direction) = 0x43<br><br>Name : Ventilation function setting<br>EPC : 0xC0<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"HumidifierFunctionSetting","epc":"0xC1","size":"1","announce":"undefined","set":"optional","get":"optional","doc":"Used to specify whether or not to use the humidifier function, and to acquire the current setting.<br><br>Humidifier function ON = 0x41, Humidifier function OFF = 0x42<br><br>Name : Humidifier function setting<br>EPC : 0xC1<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"VentilationAirFlowRateSetting","epc":"0xC2","size":"1","announce":"undefined","set":"optional","get":"optional","doc":"Used to specify the ventilation air flow rate by selecting a level from among the predefined levels, and to acquire the current setting.<br><br>Automatic control of ventilation air flow rate = 0x41, ventilation air flow rate = 0x31 to 0x38<br><br>Name : Ventilation air flow rate setting<br>EPC : 0xC2<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"DegreeOfHumidificationSetting","epc":"0xC4","size":"1","announce":"undefined","set":"optional","get":"optional","doc":"Used to specify the degree of humidification to achieve by selecting a level from among the predefined levels, and to acquire the current setting.<br><br>Automatic control of the degree of humidification = 0x41 Degree of humidification = 0x31 to 0x38<br><br>Name : Degree of humidification setting<br>EPC : 0xC4<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"MountedAirCleaningMethod","epc":"0xC6","size":"1","announce":"undefined","set":"undefined","get":"optional","doc":"A bitmap indicates mounted method of exercising air cleaning function.<br><br>Bit 0: Information about electrical dust collection method mounting 0 - Not mounted 1 - Mounted Bit 1: Information about cluster ion method mounting 0 - Not mounted 1 . Mounted<br><br>Name : Mounted air cleaning method<br>EPC : 0xC6<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : optional<br>"},
		{"name":"AirPurifierFunctionSetting","epc":"0xC7","size":"8","announce":"undefined","set":"optional","get":"optional","doc":"An 8-byte array used to specify, for each type of air purifier function, whether or not to use the air purifier function and the degree of air purification to achieve with the air purifier function, and to acquire the current settings.<br><br>Element 0: Indicates whether or not to use the electrical dust collection-based air purifier function. Element 1: Indicates whether or not to use the cluster ion-based air purifier function. Elements 2 to 7: Reserved for future use.<br><br>Name : Air purifier function setting<br>EPC : 0xC7<br>Data Type : unsigned char x 8<br>Data Size(Byte) : 8 byte<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"MountedAirRefreshMethod","epc":"0xC8","size":"1","announce":"undefined","set":"undefined","get":"optional","doc":"A bitmap indicates mounted method for exercising refresh function.<br><br>Bit 0: Information about minus ion method mounting 0 - Not mounted 1 - Mounted Bit 1: Information about cluster ion method mounting 0 - Not mounted 1 . Mounted<br><br>Name : Mounted air refresh method<br>EPC : 0xC8<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : optional<br>"},
		{"name":"AirRefresherFunctionSetting","epc":"0xC9","size":"8","announce":"undefined","set":"optional","get":"optional","doc":"An 8-byte array used to specify, for each type of air refresher function, whether or not to use the air refresher function and the degree of air refreshing to achieve with the air refresher function, and to acquire the current settings.<br><br>Element 0: Indicates whether or not to use the minus ion-based air refresher function. Element 1: Indicates whether or not to use the cluster ion-based air refresher function. Elements 2 to 7: Reserved for future use.<br><br>Name : Air refresher function setting<br>EPC : 0xC9<br>Data Type : unsigned char x 8<br>Data Size(Byte) : 8 byte<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"MountedSelfCleaningMethod","epc":"0xCA","size":"1","announce":"undefined","set":"undefined","get":"optional","doc":"A bitmap indicates mounted method for exercising self-cleaning function.<br><br>Bit 0: Information about ozone cleaning method mounting 0 - Not mounted 1 - Mounted Bit 1: Information about drying method mounting 0 - Not mounted 1 . Mounted<br><br>Name : Mounted self-cleaning method<br>EPC : 0xCA<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : optional<br>"},
		{"name":"SelfCleaningFunctionSetting","epc":"0xCB","size":"8","announce":"undefined","set":"optional","get":"optional","doc":"An 8-byte array used to specify, for each type of self-cleaning function, whether or not to use the self-cleaning function and the degree of self-cleaning to achieve with the self-cleaning function, and to acquire the current settings.<br><br>Element 0: Indicates whether or not to use the ozone-based self-cleaning function. Element 1: Indicates whether or not to use the drying-based self-cleaning function. Elements 2 to 7: Reserved for future use.<br><br>Name : Self-cleaning function setting<br>EPC : 0xCB<br>Data Type : unsigned char x 8<br>Data Size(Byte) : 8 byte<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"SpecialFunctionSetting","epc":"0xCC","size":"1","announce":"undefined","set":"optional","get":"optional","doc":"Used to specify the  gspecial function h to use, and to acquire the current setting.<br><br>No setting: 0x40, clothes dryer function: 0x41, condensation suppressor function: 0x42, mite and mold control function: 0x43, active defrosting function: 0x44 0x45 . : Reserved for future use.<br><br>Name : Special function setting<br>EPC : 0xCC<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"OperationStatusOfComponents","epc":"0xCD","size":"1","announce":"undefined","set":"undefined","get":"optional","doc":"This property indicates the operation status of components of the air conditioner in a bitmap format.<br><br>Bit 0: Operation status of the compressor: 0: Not operating 1: In operation Bit 1: Operation status of the thermostat: 0: Thermostat OFF 1: Thermostat ON Bits 2 to 7: Reserved for future use.<br><br>Name : Operation status of components<br>EPC : 0xCD<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : undefined<br>Get : optional<br>"},
		{"name":"ThermostatSettingOverrideFunction","epc":"0xCE","size":"1","announce":"undefined","set":"optional","get":"undefined","doc":"Used to specify whether or not to allow the air conditioner to operate ignoring its thermostat setting.<br><br>Normal setting = 0x40, thermostat setting override function ON = 0x41, thermostat setting override function OFF = 0x42<br><br>Name : Thermostat setting override function<br>EPC : 0xCE<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : undefined<br>"},
		{"name":"AirPurificationModeSetting","epc":"0xCF","size":"1","announce":"undefined","set":"optional","get":"optional","doc":"Used to set the air purification mode seting ON/OFF and to acquire the current setting. B<br><br>Air purification ON  0x41,OFF   0x42<br><br>Name : Air purification mode setting<br>EPC : 0xCF<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"OnTimerBasedReservationSetting","epc":"0x90","size":"1","announce":"undefined","set":"optional","get":"optional","doc":"Used to specify whether or not to use the ON timer (time-based reservation function, relative time-based reservation function or both), and to acquire the current setting.<br><br>Both the time- and relative time-based reservation functions are ON = 0x41, both reservation functions are OFF = 0x42, time-based reservation function is ON = 0x43, relative time-based reservation function is ON = 0x44<br><br>Name : ON timer-based reservation setting<br>EPC : 0x90<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"OnTimerSettingTime","epc":"0x91","size":"2","announce":"undefined","set":"optional","get":"optional","doc":"Used to specify the time for the time-based reservation function in the HH:MM format and to acquire the current setting.<br><br>0 to 0x17: 0 to 0x3B (= 0 to 23): (= 0 to 59)<br><br>Name : ON timer setting (time)<br>EPC : 0x91<br>Data Type : unsigned char x 2<br>Data Size(Byte) : 2 bytes<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"OnTimerSettingRelativeTime","epc":"0x92","size":"2","announce":"undefined","set":"optional","get":"optional","doc":"Used to specify the relative time for the relative time-based reservation function in the HH:MM format and to acquire the current setting.<br><br>0 to 0xFF: 0 to 0x3B (= 0 to 255): (= 0 to 59)<br><br>Name : ON timer setting (relative time)<br>EPC : 0x92<br>Data Type : unsigned char x 2<br>Data Size(Byte) : 2 bytes<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"OffTimerBasedReservationSetting","epc":"0x94","size":"1","announce":"undefined","set":"optional","get":"optional","doc":"Used to specify whether or not to use the OFF timer (time-based reservation function, relative time-based reservation function or both), and to acquire the current setting.<br><br>Both the time- and relative time-based reservation functions are ON = 0x41, both reservation functions are OFF = 0x42, time-based reservation function is ON = 0x43, relative time-based reservation function is ON = 0x44<br><br>Name : OFF timer-based reservation setting<br>EPC : 0x94<br>Data Type : unsigned char<br>Data Size(Byte) : 1 byte<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"OffTimerSettingTime","epc":"0x95","size":"2","announce":"undefined","set":"optional","get":"optional","doc":"Used to specify the time for the time-based reservation function in the HH:MM format and to acquire the current setting.<br><br>0 to 0x17: 0 to 0x3B (= 0 to 23): (= 0 to 59)<br><br>Name : OFF timer setting (time)<br>EPC : 0x95<br>Data Type : unsigned char x 2<br>Data Size(Byte) : 2 bytes<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"},
		{"name":"OffTimerSettingRelativeTime","epc":"0x96","size":"2","announce":"undefined","set":"optional","get":"optional","doc":"Used to specify the relative time for the relative time-based reservation function in the HH:MM format and to acquire the current setting.<br><br>0 to 0xFF: 0 to 0x3B (= 0 to 255): (= 0 to 59)<br><br>Name : OFF timer setting (relative time)<br>EPC : 0x96<br>Data Type : unsigned char x 2<br>Data Size(Byte) : 2 bytes<br><br>AccessRule<br>Announce : undefined<br>Set : optional<br>Get : optional<br>"}
	]
}